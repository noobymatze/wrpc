// Represents a Date without any timezone information.
data Date {
    day: Int32,
    month: Int32,
    year: Int32,
}

// Represents a DateTime without any timezone information.
data DateTime {
    day: Int32,
    month: Int32,
    year: Int32,
    hour: Int64,
    minute: Int64,
    seconds: Int64,
}

// An *Association* is an overarching organisation in the German
// floorball landscape. They organize 
data Association {
    id: Int64,
    name: String,
    createdAt: DateTime,
    updatedAt: DateTime,
}

// Represents data, that is used to insert and update 
// an [Association](#Association).
data AssociationData {
    name: String?,
}

// A *Club* is a club, that belongs to an [Association](#Association).
//
// It can be a club in 
data Club {
    id: Int64,
    name: String,
    shortName: String,
    association: Association,
    createdAt: DateTime,
    updatedAt: DateTime,
}

data ClubData {
    name: String?,
    shortName: String?,
}

data Season {
    start: Date,
}

// This is an error, that will happen
enum Error {
    // More stuff!
    Hello { name: String, foo: Int32 },
    Foo { name: String, },
}

// Represents login credentials for a specific user. 
data Credentials {
    username: String,
    password: String,
}

// A *Role* represents the role a user can have when
// navigating the nordref application.
// 
// - *SuperAdmin*: Means a user can do everything in the system, even on behalf of another user.
// - *Admin*: Means a user can do everything a SuperAdmin can do, except deleting.
// - *ClubAdmin*: Means a user can manage the users, registrations and data of their club.
// - *Referee*: Means someone who is a referee and wants to register for Courses.
// - *User*: Just a user.
enum Role {
    SuperAdmin,
    Admin,
    ClubAdmin,
    Referee,
    User,
}

data Session {
    id: SessionId,
    role: Role,
}

data SessionId {
    id: String
}

// The [SessionService] manages sessions and allows a
// user to login.
service SessionService {

    // Signs in a user based on the given [Credentials](#Credentials).
    def login(credentials: Credentials): Greet

    // Sign out the given session via the given SessionId.
    def logout(session: SessionId): Result<Error, Greet>

}

// The *AssociationService* manages associations and their data.
service AssociationService {

    def get(id: Int64): Association?

    def insert(data: AssociationData): Result<Error, Association>

    def update(data: AssociationData): Result<Error, Association>

    def delete(id: Int64)

}

// The *ClubService* manages clubs and their data.
service ClubService {

    def get(id: Int64): Club?

    def insert(data: ClubData): Result<Error, Club>

    def update(data: ClubData): Result<Error, Club>

    def delete(id: Int64)

}